// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/PereRohit/util/cache (interfaces: Cacheable)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockCacheable is a mock of Cacheable interface.
type MockCacheable struct {
	ctrl     *gomock.Controller
	recorder *MockCacheableMockRecorder
}

// MockCacheableMockRecorder is the mock recorder for MockCacheable.
type MockCacheableMockRecorder struct {
	mock *MockCacheable
}

// NewMockCacheable creates a new mock instance.
func NewMockCacheable(ctrl *gomock.Controller) *MockCacheable {
	mock := &MockCacheable{ctrl: ctrl}
	mock.recorder = &MockCacheableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheable) EXPECT() *MockCacheableMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockCacheable) Delete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCacheableMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCacheable)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockCacheable) Get(arg0 context.Context, arg1 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCacheableMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCacheable)(nil).Get), arg0, arg1)
}

// Health mocks base method.
func (m *MockCacheable) Health() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Health")
	ret0, _ := ret[0].(error)
	return ret0
}

// Health indicates an expected call of Health.
func (mr *MockCacheableMockRecorder) Health() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Health", reflect.TypeOf((*MockCacheable)(nil).Health))
}

// Set mocks base method.
func (m *MockCacheable) Set(arg0 context.Context, arg1 string, arg2 interface{}, arg3 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockCacheableMockRecorder) Set(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockCacheable)(nil).Set), arg0, arg1, arg2, arg3)
}
